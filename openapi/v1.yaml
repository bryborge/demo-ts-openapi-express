openapi: 3.0.0

info:
  title: Generic API
  description: A demo API that showcases the use of OpenAPI and Express
  version: 1.0.0

paths:
  /:
    get:
      summary: Get API information
      operationId: getApiInfo
      tags:
        - Info
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The current operational status of the API
                    example: 'operational'
                  uptime:
                    type: integer
                    format: int64
                    description: The amount of time the API has been running
                    example: 11.123456789
                  contact:
                    type: object
                    description: Contract information for API support
                    properties:
                      email:
                        type: string
                        example: 'support@example.com'
                      website:
                        type: string
                        example: 'https://example.com'
                  documentation:
                    type: string
                    description: Link to this API's documentation
                    example: 'http://api.example.com/docs'
                  license:
                    type: string
                    description: The license type of the API
                    example: 'MIT'
                  server_time:
                    type: string
                    description: The current time of the API
                    example: '2024-01-01T00:00:00Z'
        '500':
          description: Server error

  /users:
    get:
      summary: Get all users
      operationId: getUsers
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: User object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{username}:
    get:
      summary: Get a user by username
      operationId: getUserByUsername
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          description: Username of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      summary: Update a user by username
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          description: Username of the user to update
          schema:
            type: string
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete a user by username
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          description: Username of the user to delete
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
      required:
        - _id
        - username
        - email

    UserInput:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
      required:
        - username
        - email

security:
  - bearerAuth: []
